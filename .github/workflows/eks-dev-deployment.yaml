name: Deploy to DEV EKS
on:
  push:
    branches:
      - main
jobs:
  build_and_Deploy_EKS-DEV:
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

            # Install dependencies and build
      - name: Install dependencies and build
        run: |
          ls -ltra
          if [ -f .env ]; then
            rm .env
          fi
          echo '${{ secrets.DEV_ENV }}' > .env
          ls -ltra
          yarn install
          yarn run build
          ls -ltra 
          ls -ltra dist
      # Ensure dist/ directory exists
      - name: Verify dist/ directory
        run: |
          if [ ! -d dist ]; then
            echo "dist/ directory not found. Creating it manually."
            mkdir dist
          fi

      - name: Create Dockerfile in dist/
        run: |
          # Copy nginx.conf if it exists
          if [ -f nginx.conf ]; then
            cp nginx.conf dist/
            echo "nginx.conf copied to dist/"
          else
            echo "Error: nginx.conf not found in the repository."
            exit 1
          fi
          # Copy Dockerfile if it exists
          if [ -f Dockerfile ]; then
            cp Dockerfile dist/
            echo "Dockerfile copied to dist/"
          else
            echo "Error: Dockerfile not found in the repository."
            exit 1
          fi

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build and push Docker image
      - name: Build and Push Docker Image
        run: |
          ls -ltra dist
          cd dist/
          docker build -t ${{ secrets.DOCKER_REPO_NAME_DEV }}:${{ secrets.DOCKER_IMAGE_DEV }} .
          docker push ${{ secrets.DOCKER_REPO_NAME_DEV }}:${{ secrets.DOCKER_IMAGE_DEV }}
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      # Update EKS Deployment
      - name: Update EKS Deployment
        run: |
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          
          # Set kubectl configuration
          aws eks update-kubeconfig --region "${{ secrets.AWS_REGION }}" --name "${{ secrets.EKS_CLUSTER_NAME_DEV }}"

          # Restart the deployment
          kubectl rollout restart deployment/${{ secrets.EKS_DEPLOYMENT_NAME_DEV }} -n egov
          # Verify the restart
          kubectl rollout status deployment/${{ secrets.EKS_DEPLOYMENT_NAME_DEV }} -n egov
